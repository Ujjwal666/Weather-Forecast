{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["api","App","useState","query","setQuery","weather","setWeather","setForecasting","timeStampConvert","time","dates","Date","hours","getHours","ampm","minutes","getMinutes","seconds","getSeconds","substr","className","main","temp","type","placeholder","value","onChange","event","target","onKeyPress","key","fetch","then","res","json","result","console","log","onClick","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Math","round","style","height","objectFit","src","icon","alt","sunrise","sunset","list","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.dd0f2cc7.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport './App.css';\n\nconst api={\n    key: \"556424942a8b87529cb1c6da0f118e62\",\n    base: \"https://api.openweathermap.org/data/2.5/\"\n}\n\nfunction App() {\n    \n    const[query, setQuery] =useState('');\n    const [weather, setWeather]=useState({});\n    const [forecasting, setForecasting]=useState({});\n\n    const search=event=>{\n        if(event.key===\"Enter\"){\n            fetch(`${api.base}weather?q=${query}&units=metric&lang=de&APPID=${api.key}`)\n            .then(res=>res.json())\n            .then(result=>{\n               setWeather(result);\n               setQuery('');\n               console.log(result);\n            });\n        }   \n    }\n    const forecast=event=>{\n    \tfetch(`${api.base}forecast?q=${query}&APPID=${api.key}`)\n    \t.then(res=>res.json())\n    \t.then(result=>{\n            setForecasting(result);\n            console.log(result)\n    \t})\n    }\n    const timeStampConvert=(time)=>{\n        const dates=new Date(time*1000);\n        let hours= dates.getHours();\n        const ampm= hours >=12 ? 'P.M' : 'A.M';\n        hours =hours % 12;\n        hours = hours ? hours : 12;\n        const minutes=\"0\" + dates.getMinutes();\n        const seconds=\"0\" + dates.getSeconds();\n        return `${hours}:${minutes.substr(-2)}:${seconds.substr(-2)}${ampm}`;\n    }\n    const dateBuilder=(d)=>{\n        const months=[\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\n        \"September\",\"October\",\"November\",\"December\"];\n        const days=[\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"]\n        \n        const day= days[d.getDay()];\n        const date= d.getDate();\n        const month= months[d.getMonth()];\n        const year= d.getFullYear();\n\n        return `${day} ${date} ${month} ${year}`;\n    }\n\n\treturn (\n\t\t<div className=\n         {(typeof weather.main !=\"undefined\")\n           ? ((weather.main.temp>16)\n             ? 'app warm'\n             : 'app')\n           :'app'}\n        >\n         <main>\n\t\t  <div className=\"search-box\">\n            <input\n              type=\"text\"\n              className=\"search-bar\"\n              placeholder=\"Search..\"\n              value={query}\n              onChange={event=>setQuery(event.target.value)}\n              onKeyPress={search}\n            />\n           <button type=\"submit\" onClick={forecast}>Weather Forecast</button> \n          </div>\n          {(typeof weather.main != \"undefined\") ? (\n           <div> \n            <div className=\"location-box\">\n             <div className=\"location\">{weather.name}, {weather.sys.country}</div>\n             <div className=\"date\">{dateBuilder(new Date())}</div>\n            </div>\n            <div className=\"weather-box\">\n              <div className=\"temp\">\n                 {Math.round(weather.main.temp)}Â°c\n              </div>\n              <div className=\"weather\">\n              <img \n              style={{ height: '100px', objectFit: \"contain\" }}\n              src={`http://openweathermap.org/img/w/${weather.weather[0].icon}.png`} \n                  alt=\"Icon\"\n              />\n              {weather.weather[0].main}</div>\n            </div>\n            <div className=\"sunTime\">\n             <div className=\"sunrise\">\n              <h1>Sunrise Time</h1>\n              {timeStampConvert(weather.sys.sunrise)}\n             </div>\n             <div className=\"sunset\">\n              <h1>Sunset Time</h1>\n              {timeStampConvert(weather.sys.sunset)}\n             </div>\n            </div>\n           </div> \n          ):('')}\n          {(typeof weather.list != \"undefined\") ? (\n             <div>\n               <h1>LLl</h1>\n             </div>\n          ):('')}\n         </main> \n\t\t</div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}